*im_control.jax*  For Vim バージョン 7.2  Last change: 2012 August 14
==============================================================================
       Description: im/ime control
            Author: fuenor <fuenor@gmail.com>
     Web(Japanese): https://github.com/fuenor/im_control.vim
                    https://sites.google.com/site/fudist/Home/vim-nihongo-ban/vim-japanese/ime-control
==============================================================================
  CONTENTS                                               *im_control*
  1. Intro                                               |im_control_intro|
    1.1 日本語入力固定モードとは                         |im_control_outline|
  2. インストール                                        |im_control_install|
    2.1 Windowsまたは<C-^>でIME切替可能な場合            |im_control_ctrl_hat|
    2.1.1 MacVim-Kaoriya+iTerm2                          |im_control_mac_iterm2|
    2.2 fcitx                                            |im_control_fcitx|
    2.3 IBus+Python                                      |im_control_python|
    2.4 その他                                           |im_control_other|
    2.5 android                                          |im_control_android|
  3. オプション                                          |im_control_option|
    3.1 「日本語入力固定モード」の状態表示               |im_control_status|
    3.2 バッファごとの制御                               |im_control_buflocal|
    3.3 スクリプト等から制御する                         |im_control_func|
    3.3 「日本語入力固定モード」の動作設定               |im_control_mode|

==============================================================================
1. Intro                                                    *im_control_intro*

Vim/GVimの日本語入力や編集で一番問題になるのはIME(IM)のモード切替です。

「日本語入力固定モード」はノーマルモードから挿入モードへ移行した時に自動制御で
日本語入力をオンにするかオフにするかを選択可能にして、モード切替の問題を解決す
るプラグインです。

WindowsではIMEの制御が行えますが、仕様的な問題で入力内容によっては余計なモード
切替が頻繁に起こる事がありますし、Linuxに至ってはIM制御の挙動はまちまちで、同
じOS上のVim(非GUI)とGVimですら挙動が異なるため非常に混乱しやすくなっています。

「日本語入力固定モード」を使用するとIME(IM)の自動制御をVim(非GUI)とGVimだけで
なくWindowsとLinuxのようにOS自体が違う場合でも同じ挙動にして扱う事ができるので
非常にわかりやすくなります。

------------------------------------------------------------------------------
1.1 日本語入力固定モードとは

日本語を入力する、と言っても単に日本語で一言付け加えたいだけの時と日本語をメイ
ンに入力したい時との二種類があります。
「日本語入力固定モード」を利用すると、この二種類の場合それぞれに対応したIM/IME
の自動制御を行う事が出来ます。

ソースコードに日本語で一言コメントを書くような場合には

    ・挿入モードに入ってIME ON
    ・コメントを書く
    ・<ESC>で挿入モードを抜ける
    ・再び挿入モードへ
    ・IMEは OFF のまま

というようにIMEが自動的にOFFになります。
Windowsの場合でもいちいちIMEをオフにする必要はありません。

逆に日本語をがっつり入力したい場合は<C-j>を「日本語入力固定モード」の切替キー
にしていたとして

    ・挿入モードに入って<C-j>でIME ON
    ・なにかを書く
    ・<ESC>で挿入モードを抜ける
    ・再び挿入モードへ
    ・IMEは自動で ON になる

というように今度はIMEが自動制御でONになります。
ノーマルモードで移動して、また日本語を入力したい場合に便利かと思います。
以降は<C-j>で「日本語入力固定モード」を切り替えない限り、挿入モードの IME初期
状態が日本語入力ONになります。
「日本語入力固定モード」が有効な間は<C-j>以外でIMEをオフにしても次回のIMEの状
態はオンから始まります。

つまりノーマルモードへ抜けた時のIMEの状態にかかわらず、挿入モードへ移行した時
のIMEの初期状態は「日本語入力固定モード」で決定されるという事になります。

またバッファごとに「日本語入力固定モード」の状態を保持することも可能です。

==============================================================================
2. インストール                                           *im_control_install*

動作に必要なファイルはim_control.vimだけなのでim_control.vimを .vim/plugin
(vimfiles/plugin)などランタイムパスの通った場所にコピーします。
またGitHub等からダウンロードしたzipファイルを解凍してできたディレクトリにラン
タイムパスを通して使用することもできます。

次にIM/IMEの制御についてはOSや環境、GVimかVim(非GUI)か、それぞれで使用環境に合
わせた設定を !!!必ず!!! 行う必要があります。

  ・|im_control_ctrl_hat|
    [Windows] [Mac] Windows, MacのGVim等で<C-^>によるIM制御が行える場合
  ・|im_control_mac_iterm2|
    [Mac] iTerm2とMacVim-Kaoriyaで使用している場合
  ・|im_control_fcitx|
    [Linux] fcitxを使用している場合
  ・|im_control_python|
    [Linux] IBusを使用していてPythonがインストールされている場合
    (IBus1.5以降はIMEの状態制御を行わない方針になりましたので使用不可能です)
  ・|im_control_android|
    [android] androidの場合
  ・|im_control_other|
    [Linux] その他(SCIM, uim等)

(注意)
プラグインの性質上、GVimとVim(非GUI)やOSで設定を変更する必要があります。
必要に応じてhas('gui_running')やhas('unix')等で切り分けてください。

(設定例)
unixのGVimでは動作するがVim(非GUI)では動作しない環境の場合
>
  if has('win32') || has('win64')
    " Windowsの場合
    inoremap <silent> <C-j> <C-^><C-r>=IMState('FixMode')<CR>
  elseif has('unix')
    " unixでGVimの時だけ「日本語入力固定モード」を有効化する
    if has('gui_running')
      let IM_CtrlMode = 1
      inoremap <silent> <C-j> <C-r>=IMState('FixMode')<CR>
    else
      let IM_CtrlMode = 0
    endif
  endif
>
------------------------------------------------------------------------------
2.1 Windows, MacのGVim等で<C-^>によるIM制御が行える場合  *im_control_ctrl_hat*

「<C-^>でIMの切替が行える」場合の設定例です。
基本的に挿入モードからノーマルモードへ移行した時にIMが自動でオフになるVimなら
使用可能です。一部のVimのようにIM制御動作が独自仕様に変更されている場合はオリ
ジナルの動作と同じになるようにオプション等で設定してください。
(挿入モードで<C-^>でIMの切替を行なってからノーマルモードへ戻り、再び挿入モード
へ移行するとIMが自動でオンになる状態が前提です)

「<C-^>でIMの切替が行える」場合は以下を .vimrcへ追加してください。
>
  " 「日本語入力固定モード」の動作モード
  let IM_CtrlMode = 4
  " 「日本語入力固定モード」切替キー
  inoremap <silent> <C-j> <C-^><C-r>=IMState('FixMode')<CR>
<
  * 日本語入力固定モード切替の<C-j>は好みに合わせて変更して構いません。

<ESC>押下後の反応が遅い場合はttimeoutlenを設定してみてください。
>
  set timeout timeoutlen=3000 ttimeoutlen=100
<
<C-^>を GVimでしか使えない場合は切り分けて使用します。
>
  if has('gui_running')
    " 「日本語入力固定モード」の動作モード
    let IM_CtrlMode = 4
    " GVimで<C-^>が使える場合の「日本語入力固定モード」切替キー
    inoremap <silent> <C-j> <C-^><C-r>=IMState('FixMode')<CR>
  else
    " 非GUIの場合(この例では「日本語入力固定モード」を無効化している)
    let IM_CtrlMode = 0
  endif
<
  この例では非GUIの場合に「日本語入力固定モード」を無効化していますが、「IMCtrl
  (制御用関数)の設定」などでIM制御可能な場合は非GUI用の設定を環境に合わせて設定
  してください。

Windowsではこれで終了ですが、MacVim-KaoriyaのようにIM制御処理が独自改変されて
いる場合は以下を参照してください。

・MacVim-Kaoriya

基本的には以下を .vimrc へ追加するだけで使用可能です。
>
  " 「日本語入力固定モード」の動作モード
  let IM_CtrlMode = 4
  " 「日本語入力固定モード」切替キー
  inoremap <silent> <C-j> <C-^><C-r>=IMState('FixMode')<CR>
<
  なおMacVim-KaoriyaではIM_CtrlModeの設定を .gvimrc ではなく .vimrc に書かないと
  様々な不具合が起きるようです。Vim(非GUI)とGVimで.vimrcを共用している場合は
  has('gui_running')で切り分けてください。

・MacVim-Kaoriyaのnoimdisableactivateについて

デフォルトではim_control.vimが自動設定を行うので、気にする必要はないのですが
MacVim-Kaoriyaで im_control.vimを使用する場合 noimdisableactivateを設定する必
要があります。
ただし noimdisableactivateは.vimrc ではなく.gvimrcで設定しないと有効になりませ
んので明示的に指定する場合は気をつけてください。

なおMacVim-Kaoriyaの仕様変更等で noimdisableactivateの設定を変える必要がある場
合は「日本語入力固定モード」の MacVim-Kaoriya対策を無効化してください。

.vimrc
>
  " 「日本語入力固定モード」のMacVimKaoriya対策を無効化
  let IM_CtrlMacVimKaoriya = 0

.gvimrc
>
  " MacVim-Kaoriya(GVim)で日本語入力(IM)自動オン/オフ
  " noimdisableactivateは .gvimrcで設定する必要があります
  set noimdisableactivate

2.1.1 iTerm2 + Vim (MacVim-Kaoriya)                  *im_control_mac_iterm2*

作者には動作環境がないので確認していませんが、iTerm2 と MacVim-Kaoriya で使用
している方はいるようです。
http://qiita.com/wakuworks/items/7c9c6ab60275fd865b02

------------------------------------------------------------------------------
2.2 fcitxを使用している場合                                *im_control_fcitx*

fcitxを使用している場合はcall system("fcitx-remote -t")などで制御可能です。
以下を.vimrcに追加してください。
>
  " 「日本語入力固定モード」の動作モード(fcitx)
  let IM_CtrlMode = 6
  " 「日本語入力固定モード」切替キー
  inoremap <silent> <C-j> <C-r>=IMState('FixMode')<CR>
<
  * 日本語入力固定モード切替の<C-j>は好みに合わせて変更して構いません。

<ESC>押下後の反応が遅い場合はttimeoutlenを設定してみてください。
>
  set timeout timeoutlen=3000 ttimeoutlen=100

------------------------------------------------------------------------------
2.3 IBusを使用していてPythonがインストールされている場合   *im_control_python*

IMがIBusでPythonが使える場合は Pythonスクリプトで IBusを制御可能です。
Vim自体の Pythonインターフェイスが無効でも、OSに Pythonがインストールされてい
れば動作します。(動作確認 IBus 1.3.9, Ubuntu 10.10)

!!! IBus1.5以降はIMEの状態制御を行わない方針になりましたので使用不可能です。
>
  " 「日本語入力固定モード」の動作モード
  let IM_CtrlMode = 5
  " 「日本語入力固定モード」切替キー
  inoremap <silent> <C-j> <C-r>=IMState('FixMode')<CR>
<
  * 日本語入力固定モード切替の<C-j>は好みに合わせて変更して構いません。

<ESC>押下後の反応が遅い場合はttimeoutlenを設定してみてください。
>
  set timeout timeoutlen=3000 ttimeoutlen=100

この設定で正常動作を確認していますが、後述するIBusのvi協調モードのバグ対策のた
めデフォルトでは GVimでも「日本語入力固定モード」のvi協調モードを有効にしてい
ます。IBusのvi協調モードが正常動作動作するようになった場合には不要な動作ですの
で以降を読んでおくと良いかもしれません。

なおIBusを使用していても動作しない場合は
「その他の方法で制御する」|im_control_other|で制御してみてください。

------------------------------------------------------------------------------
・IBus + Pythonのオプション

IBusを Pythonで制御する場合の制御方法を指定する事ができます。

IM_CtrlIBusPython
+----------------------------------------------------------------------------
| 0      | Pythonによる IBus制御を行わない
+----------------------------------------------------------------------------
| 1      | 常に外部Pythonスクリプトで制御
+----------------------------------------------------------------------------
| 2      | Pythonインターフェイス制御のみ使用
|        | 外部 Pythonスクリプトは一切使用しない。
|        | (Vimの+Pythonが有効でないと動作しません)
|        | (GVimでは「IBus本体の vi協調モード」を無効化しないと動作しない可能
|        | 性があります)
+----------------------------------------------------------------------------
>
  " PythonによるIBus制御指定
  let IM_CtrlIBusPython = 1
<
IBusを Pythonで制御する場合は Pythonスクリプトが自動生成されることがあります。
保存場所は IM_CtrlIBusPythonFileDirで指定可能です。
>
  " 自動生成するファイルの保存場所
  let IM_CtrlIBusPythonFileDir = '~/.ibus'

将来的にPython3インターフェイスを使用して制御する必要がある場合はインターフェ
イス名に python3 を指定してください。
>
  " 使用するPythonインターフェイスのバージョン
  let IM_CtrlIBusPythonVer = 'python'

------------------------------------------------------------------------------
・IBusのvi協調モード(GVim)のバグについて

IBusにはGVimがノーマルモードへ移行したらIMをオフにするvi協調モードがあるのです
が、IMをオンにしてから文字入力を行わないでノーマルモードへ戻るとIMがオフになら
ないというバグがあります。

たとえば IMの On/Offが <C-space>だとして i<C-space>hogefuga<CR><ESC> のように
文字入力してから <ESC>だとノーマルモード移行時にIMがオフになりますが、
i<C-space><ESC> だとノーマルモード移行時に IMがオフになりません。
(このバグがあるかどうかは「日本語入力固定モード」を無効化して確認してみてくだ
さい)
>
  " 「日本語入力固定モード」を無効化
  let IM_CtrlMode = 0

このバグは IBus 1.3.7-以降で確認しています。
このため本来は不要なのですが該当バグ対策のために「日本語入力固定モード」のvi協
調モードも有効にしています。

ただし該当バグの挙動が気にならなければ、現時点でも下記設定を利用して「日本語入
力固定モード」のvi協調モードを無効化したほうが操作感は良くなります。
>
  " GVimの時だけ「日本語入力固定モード」のvi協調モードを無効化
  let IM_vi_CooperativeMode = has('gui_running') ? 0 : 1

将来IBusのバグが修正された場合は上記設定を利用して「日本語入力固定モード」のvi
協調モードを無効化してください。

------------------------------------------------------------------------------
2.4 その他の方法で制御する                                 *im_control_other*

まずはなんらかのIM制御処理を組み込む必要があります。

IMをON/OFFできれば何でも構わないのですが、今回はIMの機能にほとんど依存しない方
法としてIMに適当なホットキーを設定してやり、Vimから 仮想キーコマンド(xvkbd)を
呼び出して仮想的にホットキーを入力することで IMを制御するという方法を使用しま
す。
以下はUnixのxvkbdを使う場合の設定ですが、他の外部コマンドを使用したい場合は適
切に読み替えてください。

------------------------------------------------------------------------------
・xvkbdによるIM制御の準備

1. xvkbdのインストール
まず xvkbdを synapticや apt-getなどでインストールします。
>
  $ apt-get install xvkbd

2. ホットキーの設定
次にIMのホットキーを以下のように設定します。

  |開始/終了   | [Control] + [space]            |
  |開始        | [Control] + [Shift] + [Insert] |
  |終了        | [Control] + [Shift] + [Delete] |

  「開始」と「終了」が個別に設定できない場合は「開始/終了」だけ設定して下さい。
  キーは好みで変更してかまいませんが、後述するスクリプトの設定も変更する必要が
  あります。

3. IM制御の確認
設定が済んだらコマンドラインから以下を実行して IM制御可能か確認してください。
>
  $ xvkbd -text "\[Control]\[space]" > /dev/null 2>&1

実行の度に IMの状態が切り替わるはずです。
「開始」と「終了」を個別設定している場合はそちらも確認してみて下さい。

------------------------------------------------------------------------------
・IMCtrl (制御用関数)の設定

xvkbdで制御可能なことを確認したらIMCtrl(制御用関数)を設定します。
IM制御にxvkbd以外を使用したい場合やホットキーを設定例以外に変更した場合は
IMCtrl()も設定に合わせて変更してやる必要があります。
.vimrcへ IMCtrl(cmd)を追加して適切な設定を行なってください。
デフォルトは次のように設定されています。
>
  """"""""""""""""""""""""""""""
  " 日本語入力固定モードの制御関数(デフォルト)
  """"""""""""""""""""""""""""""
  function! IMCtrl(cmd)
    let cmd = a:cmd
    if cmd == 'On'
      let res = system('xvkbd -text "\[Control]\[Shift]\[Insert]" > /dev/null 2>&1')
    elseif cmd == 'Off'
      let res = system('xvkbd -text "\[Control]\[Shift]\[Delete]" > /dev/null 2>&1')
    elseif cmd == 'Toggle'
      let res = system('xvkbd -text "\[Control]\[space]" > /dev/null 2>&1')
    endif
    return ''
  endfunction

適切なコマンドを設定していれば Vimから IMCtrl()を呼び出してIM制御を行うことが
できるはずです。
次のようにトグルコマンドを呼び出して確認してみてください。
>
  :call IMCtrl('Toggle')

動作がおかしいときは imactivatekeyや $GTK_IM_MODULE などIM関係オプションは設定
しないで無効にしてみてください。トグルや切替でおかしくなる場合は ttimeoutlenを
設定してみたり、xvkbdの呼び出し部分の最後に & を付加して非同期で呼び出してみる
のも良いかもしれません。
>
  let res = system('xvkbd -text "\[Control]\[Shift]\[Insert]" > /dev/null 2>&1 &')

一部のIMのように制御用のコマンドが用意されていたり、Python等の外部スクリプトで
切り替えたい場合は xvkbdの呼び出し部分を書き換えて下さい。なお xvkbd以外のコマ
ンドを呼び出す場合は system()での呼び出しコマンドの最後に & をつけて非同期で呼
び出す方が問題は起きにくいようです。

------------------------------------------------------------------------------
・「日本語入力固定モード」の設定

最後に「日本語入力固定モード」自体の設定を追加します。
>
  " 「日本語入力固定モード」切替キー
  inoremap <silent> <C-j> <C-r>=IMState('FixMode')<CR>
<
  * 日本語入力固定モード切替の<C-j>は好みに合わせて変更して構いません。

uim等を使用していてIM自体にGVim用vi協調モードがある場合は「日本語入力固定モー
ド」のvi協調モードを無効化します。
>
  " GVimの時だけ「日本語入力固定モード」のvi協調モードを無効化
  let IM_vi_CooperativeMode = has('gui_running') ? 0 : 1

設定例
>
  " SCIM設定
  " 「日本語入力固定モード」切替キー
  inoremap <silent> <C-j> <C-r>=IMState('FixMode')<CR>

  " uim設定
  " 「日本語入力固定モード」切替キー
  inoremap <silent> <C-j> <C-r>=IMState('FixMode')<CR>
  " GVimの時だけ「日本語入力固定モード」のvi協調モードを無効化
  let IM_vi_CooperativeMode = has('gui_running') ? 0 : 1

<ESC>押下後の反応が遅い場合はttimeoutlenを設定してみてください。
>
  set timeout timeoutlen=3000 ttimeoutlen=100

------------------------------------------------------------------------------
2.5 androidの場合                                        *im_control_android*

androidの現状(～Android 4.4)としてはIME制御を各IMEが独自に処理しているため、OSと
して統一されたIME制御方法は存在しません。
Android 4.1以降ではuser-installable keyboard mapsという仕組みが用意されて、英
語配列でしか使えなかったキーボードを日本語配列や独自設定配列で使用可能ですが、
Google日本語のようにハードウェアキーボードのキーマップ設定を無視して独自処理す
るものもあります。

したがってandroidでは各IMEの制御に合わせて|im_control_other|で説明している
IMCtrl()を適切に設定する必要があります。

今回はiWnn(またはWnn keyboard lab)で作者が実際に使用してみた設定をサンプルとし
て解説します。
以下がandroid用として.vimrcに追加している設定で、<C-j>によって日本語入力固定
モードが使用可能です。
>
 " im_control.vim
 inoremap <silent> <C-j> <C-r>=IMState('FixMode')<CR>

 " android (Wnn Keyboard lab)
 let IM_Keycode = 'KEYCODE_ZENKAKU_HANKAKU'
 " android (iWnn)
 let IM_Keycode = 'KEYCODE_GRAVE'

 function! IMCtrl(cmd)
   let cmd = a:cmd
   if cmd == 'On'
     let res = system('input keyevent '.g:IM_Keycode.'&')
   elseif cmd == 'Off'
     " 実際には意味が無いので無効化
     " let res = system('input keyevent KEYCODE_ESCAPE&')
   elseif cmd == 'Toggle'
   endif
   return ''
 endfunction

見ればわかるようにIME制御は[半角/全角]の押下イベントを発生させているだけです。
iWnnとWnn keyboard labでキーコードが違うので気をつけてください。
IMEオフを行えるキーはWnnに無いようなのですが、<ESC>でIMEオフになるので実用上は
問題ありません。
なお前述のuser-installable keyboard mapsを使用して日本語配列に設定している場合
は[半角/全角]キーでIMEのオン／オフも行えます。
user-installable keyboard mapsによって日本語配列化するアプリはGoogle Playでも
配布されているので適当なアプリをインストールすると良いでしょう。

英語配列で使用したい場合は、以下のようにGRAVEキーでIMEオン出来るようにすると良
いかもしれません。
>
  inoremap <silent> ` <C-r>=IMCtrl('On')<CR>

ただし、inputコマンドはJavaVMを起動するためワンテンポ遅れる感じに処理されてし
まいます。

問題になるのはインサートモード移行時に日本語入力を有効化する場合ですが、気にな
るようならAndroid Terminal EmulatorにIME制御パッチを当てるなどで対処すると良い
かもしれません。

・Android Terminal EmulatorIME制御改変版

https://sites.google.com/site/fudist/Home/qfixhowm/other-service/howm-android

アクションバーやAlt+[半角/全角]、エスケープシーケンスからIME制御を行えるように
機能追加をし、マルチバイト文字関係の処理を日本語環境向けに変更しています。
IME制御改変版ではiWnn, Wnn keyboard lab, Google日本語入力, atok, などIMEを選ば
ずに使用可能です。

==============================================================================
3. オプション                                              *im_control_option*

3.1 「日本語入力固定モード」の状態を表示する               *im_control_status*

コマンドラインの高さを 2 以上にしておくと切替時に切替後の「日本語入力固定モー
ド」が表示されます。
>
  set cmdheight=2

それ以外に「日本語入力固定モード」がオンの場合、ステータス行にメッセージ表示す
ることも可能です。
>
  " 「日本語入力固定モード」がオンの場合、ステータス行にメッセージ表示
  set statusline+=%{IMStatus('[日本語固定]')}
<
  [日本語固定] のメッセージ部分は好みに書き換えてください。

im_control.vimがない環境でも .vimrcを変更しなくて済むように、.vimrc内でダミー
関数も定義しておくと良いかもしれません。
>
  " 「日本語入力固定モード」がオンの場合、ステータス行にメッセージ表示
  set statusline+=%{IMStatus('[日本語固定]')}

  " im_control.vimがない環境でもエラーを出さないためのダミー関数
  function! IMStatus(...)
    return ''
  endfunction

------------------------------------------------------------------------------
3.2 バッファごとに「日本語入力固定モード」を制御する     *im_control_buflocal*

デフォルトではVim全体で「日本語入力固定モード」の制御状態が共有されますが、
「日本語入力固定モード」の状態を各バッファごとに保持して個別制御することも可能
です。
>
  " 「日本語入力固定モード」の全バッファローカルモード
  let IM_CtrlBufLocalMode = 1

全バッファではなく特定のバッファでのみ「日本語入力固定モード」の状態を個別制御
したい場合はバッファローカルなオプションを設定してください。
>
  " 「日本語入力固定モード」のバッファローカルモード
  let b:IM_CtrlBufLocal = 1
<
  (注意) 通常のオプションと違い b: が付いているので気をつけてください。


(例) 特定ファイルタイプや拡張子でバッファローカルな制御を行う
>
  " ファイルタイプがvim (.vimrcやvimスクリプトなど)なら個別制御
  au FileType vim let b:IM_CtrlBufLocal = 1

  " 拡張子が confなら個別制御
  au BufRead,BufNewFile *.conf let b:IM_CtrlBufLocal = 1

------------------------------------------------------------------------------
3.3 スクリプト等から制御する                                 *im_control_func*

以下は 独自スクリプト等でIMの状態や「日本語入力固定モード」を制御する際の参考
にしてください。

IM/IMEの制御
IM/IME制御用の関数はIMCtrl()として定義されています。
各コマンドを実行して IM/IMEの状態制御可能です。

IM/IME制御

| On     | call IMCtrl('On')     |
| Off    | call IMCtrl('Off')    |
| Toggle | call IMCtrl('Toggle') |

「日本語入力固定モード」の制御
「日本語入力固定モード」制御には変数を使用します。

「日本語入力固定モード」制御
| On  | let IMState = 2 |
| Off | let IMState = 0 |

IMState = 2なら「日本語入力固定モード」切替キーで「日本語入力固定モード」をON
にしたのと同じ事になります。

(設定例)
<ESC>に直接マップする

<C-^>以外でIM制御を行なっている場合は 「日本語入力固定モード」のvi協調モードを
オフにして <ESC>キーに直接IMオフの関数をマップする方法もあります。
>
  " 「日本語入力固定モード」のvi協調モードを無効化
  let IM_vi_CooperativeMode = 0
  " 挿入モード終了時にIME状態を保存しない
  inoremap <silent> <ESC> <ESC>:IMCtrl('Off')<CR>
  inoremap <silent> <C-[> <ESC>:IMCtrl('Off')<CR>

<ESC>押下後の反応が遅い場合はttimeoutlenを設定してみてください。
>
  set timeout timeoutlen=3000 ttimeoutlen=100

------------------------------------------------------------------------------
3.4 「日本語入力固定モード」の動作設定                       *im_control_mode*

動作モード

ノーマルモードから挿入モードへの移行時に 「日本語入力固定モード」に応じて IMを
Onにするための設定です。やむを得ない場合を除き 0 ,1, 4, 5 のいずれかで使用する
ようにしてください。
>
  " 「日本語入力固定モード」の動作設定
  let IM_CtrlMode = 1

GVimとVim(非GUI)で有効/無効を設定したい場合はgui_runningで切り分けてください。
>
  " GVimの時だけ「日本語入力固定モード」を有効化
  let IM_CtrlMode = has('gui_running') ? 1 : 0

IM_CtrlMode
+----------------------------------------------------------------------------
| 0 | 何もしない
+----------------------------------------------------------------------------
| 1 | IM On/Offが個別制御できる場合に設定します。
|   | 独自のvi協調モードも動作します。
+----------------------------------------------------------------------------
| 2 | IM制御が Toggleしか使用できない場合に設定します。
|   | 独自のvi協調モードは動作しません。
+----------------------------------------------------------------------------
| 3 | IM制御が Toggleしか使用できない場合に設定します。
|   | 独自の  vi協調モードは動作しませんが、挿入モードからノーマルモード
|   | への移行時に「日本語入力固定モード」が Onだったら Toggleを実行しま
|   | す。これは「日本語入力固定モード」がOnなら日本語メインで入力してい
|   | るはずで、挿入モードでは日本語モードになっていることが多いだろう、
|   | という仮定から実装された "疑似vi協調モード" です。
+----------------------------------------------------------------------------
| 4 | <C-^>で IM制御が行える場合に設定します。
|   | Windowsの場合は常にこの設定が使用されます。
+----------------------------------------------------------------------------
| 5 | IBus+Pythonで IM制御が行える場合に設定します。
|   | (起動後に内部設定が行われ IM_CtrlMode=1に自動変更されます)
+----------------------------------------------------------------------------

vi協調モード

vi協調モードは挿入モードからノーマルモードへの移行時にIMを自動でオフにする機能
です。IM自体にvi協調モードがある場合は「日本語入力固定モード」独自のvi協調モー
ド処理をスキップさせるため IM_vi_CooperativeMode に 0 を設定してください。
必要なら VimとGVimで設定を変更すると良いでしょう。
>
  " GVimの時だけ「日本語入力固定モード」の vi協調モードを無効化
  let IM_vi_CooperativeMode = has('gui_running') ? 0 : 1

IM_vi_CooperativeMode
+----------------------------------------------------------------------------
| 0 | 何もしない
+----------------------------------------------------------------------------
| 1 |「日本語入力固定モード」独自の vi協調モードが有効になります。
+----------------------------------------------------------------------------

日本語入力固定モード切替時の処理

IM_JpFixModeAutoToggle = 0
+----------------------------------------------------------------------------
| 0 | 日本語入力固定モードにあわせてIMCtrl('On')またはIMCtrl('Off')を実行
|   | IMCtrl('Toggle')は実行しない
+----------------------------------------------------------------------------
| 1 | IMCtrl('Toggle')を実行
|   | IM制御が Toggleしか使用できない場合に設定します。
+----------------------------------------------------------------------------
| 2 | IMCtrl('On')のみ実行
+----------------------------------------------------------------------------
| 3 | IMCtrl('Off')のみ実行
+----------------------------------------------------------------------------
| 4 | なにもしない
+----------------------------------------------------------------------------

------------------------------------------------------------------------------
同期呼び出しと非同期呼び出し

(「<C-^>でIMの切替が行える場合」では関係ありません)

環境によりますが GVimでは「日本語入力固定モード」をオンにしている時のノーマル
モードで iiiiiiiiと高速に入力してみると最初の数文字が変換されない、という現象
が起きる事があります。これは挿入モード移行時の IM有効化が間に合わないため、挿
入モード移行直後に入力された文字の一部が変換されずに直接入力されてしまうためで
す。
この現象は処理が高速な今時のマシンではあまり問題にはならないようですので、さほ
ど気にする必要はないかもしれません。

この問題を原理的に回避するには IMの有効化を同期処理として実行する必要がありま
すが、GVimの場合には IM自体の vi協調モードとバッティングして動作しない事がある
ためデフォルトでは非同期呼び出しになっています。逆に Vim(非GUI)のデフォルトは
同期呼び出しですが、それぞれ正常動作しない時は呼び出し方法を変更してください。
>
  " 制御スクリプトを同期処理で呼び出し
  let IM_CtrlAsync = ''

  " 制御スクリプトを非同期で呼び出し
  let IM_CtrlAsync = '&'

uimや SCIMの場合は同期処理として呼び出すと良いかもしれません。
なおIMCtrl()を自分で定義している場合は本オプションは影響しません。

  vim:tw=78:ts=8:ft=help:norl

